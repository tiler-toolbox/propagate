{
  "env": {
    "browser": true
  },
  "rules": {

    // Possible Errors

    // disallow or enforce trailing commas
    "comma-dangle": [2, "never"],
    // disallow assignment in conditional expressions
    "no-cond-assign": [2, "always"],
    // disallow use of console in the node environment
    "no-console": 1,
    // disallow use of constant expressions in conditions
    "no-constant-condition": 2,
    // disallow control characters in regular expressions
    "no-control-regex": 2,
    // disallow use of debugger
    "no-debugger": 1,
    // disallow duplicate arguments in functions
    "no-dupe-args": 2,
    // disallow duplicate keys when creating object literals
    "no-dupe-keys": 2,
    // disallow a duplicate case label.
    "no-duplicate-case": 2,
    // disallow the use of empty character classes in regular expressions
    "no-empty-character-class": 2,
    // disallow empty statements
    "no-empty": 2,
    // disallow assigning to the exception in a catch block
    "no-ex-assign": 2,
    // disallow double-negation boolean casts in a boolean context
    "no-extra-boolean-cast": 2,
    // disallow unnecessary parentheses
    "no-extra-parens": [2, "functions"],
    // disallow unnecessary semicolons
    "no-extra-semi": 2,
    // disallow overwriting functions written as function declarations
    "no-func-assign": 2,
    // disallow function or variable declarations in nested blocks
    "no-inner-declarations": [2, "functions"],
    // disallow invalid regular expression strings in the RegExp constructor
    "no-invalid-regexp": 2,
    // disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": 2,
    // disallow negation of the left operand of an in expression
    "no-negated-in-lhs": 2,
    // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-obj-calls": 2,
    // disallow multiple spaces in a regular expression literal
    "no-regex-spaces": 2,
    // disallow sparse arrays
    "no-sparse-arrays": 2,
    // Avoid code that looks like two expressions but is actually one
    "no-unexpected-multiline": 2,
    // disallow unreachable statements after a return, throw, continue, or break statement
    "no-unreachable": 2,
    // disallow comparisons with the value NaN
    "use-isnan": 2,
    // Ensure JSDoc comments are valid
    "valid-jsdoc": [1, {
        "requireReturn": false
    }],
    // Ensure that the results of typeof are compared against a valid string
    "valid-typeof": 2,

    // Best Practices

    // Enforces getter/setter pairs in objects
    "accessor-pairs": [2, {"getWithoutSet": false, "setWithoutGet": true}],
    // treat var statements as if they were block scoped
    "block-scoped-var": 2,
    // specify the maximum cyclomatic complexity allowed in a program
    "complexity": 0,
    // require return statements to either always or never specify values
    "consistent-return": 1,
    // specify curly brace conventions for all control statements
    "curly": [2, "all"],
    // require default case in switch statements
    "default-case": 2,
    // enforces consistent newlines before or after dots
    "dot-location": 0,
    // encourages use of dot notation whenever possible
    "dot-notation": [2, {"allowKeywords": false, "allowPattern": "^[A-Za-z]+((_|-)[A-Za-z]+)+$"}],
    // require the use of === and !==
    "eqeqeq": [2, "allow-null"],
    // make sure for-in loops have an if statement
    "guard-for-in": 2,
    // disallow the use of alert, confirm, and prompt
    "no-alert": 2,
    // disallow use of arguments.caller or arguments.callee
    "no-caller": 2,
    // disallow lexical declarations in case clauses
    "no-case-declarations": 2,
    // disallow division operators explicitly at beginning of regular expression
    "no-div-regex": 2,
    // disallow else after a return in an if
    "no-else-return": 2,
    // disallow use of labels for anything other than loops and switches
    "no-empty-label": 0,
    // disallow use of empty destructuring patterns
    "no-empty-pattern": 2,
    // disallow comparisons to null without a type-checking operator
    "no-eq-null": 2,
    // disallow use of eval()
    "no-eval": 2,
    // disallow adding to native types
    "no-extend-native": 2,
    // disallow unnecessary function binding
    "no-extra-bind": 2,
    // disallow fallthrough of case statements
    "no-fallthrough": 2,
    // disallow the use of leading or trailing decimal points in numeric literals
    "no-floating-decimal": 2,
    // disallow the type conversions with shorter notations
    "no-implicit-coercion": 0,
    // disallow use of eval()-like methods
    "no-implied-eval": 2,
    // disallow this keywords outside of classes or class-like objects
    "no-invalid-this": 2,
    // disallow usage of __iterator__ property
    "no-iterator": 2,
    // disallow use of labeled statements
    "no-labels": 2,
    // disallow unnecessary nested blocks
    "no-lone-blocks": 2,
    // disallow creation of functions within loops
    "no-loop-func": 2,
    // disallow the use of magic numbers
    "no-magic-numbers": [1, {"ignore": [-1, 0, 1]}],
    // disallow use of multiple spaces
    "no-multi-spaces": 0,
    // disallow use of multiline strings
    "no-multi-str": 2,
    // disallow reassignments of native objects
    "no-native-reassign": 2,
    // disallow use of new operator for Function object
    "no-new-func": 2,
    // disallows creating new instances of String,Number, and Boolean
    "no-new-wrappers": 2,
    // disallow use of the new operator when not part of an assignment or comparison
    "no-new": 2,
    // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal-escape": 2,
    // disallow use of octal literals
    "no-octal": 2,
    // disallow reassignment of function parameters
    "no-param-reassign": 0,
    // disallow use of process.env
    "no-process-env": 1,
    // disallow usage of __proto__ property
    "no-proto": 2,
    // disallow declaring the same variable more than once
    "no-redeclare": 2,
    // disallow use of assignment in return statement
    "no-return-assign": [2, "always"],
    // disallow use of javascript: urls.
    "no-script-url": 2,
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": 2,
    // disallow use of the comma operator
    "no-sequences": 2,
    // restrict what can be thrown as an exception
    "no-throw-literal": 2,
    // disallow usage of expressions in statement position
    "no-unused-expressions": 2,
    // disallow unnecessary .call() and .apply()
    "no-useless-call": 2,
    // disallow unnecessary concatenation of literals or template literals
    "no-useless-concat": 2,
    // disallow use of the void operator
    "no-void": 0,
    // e.g. TODO or FIXME disallow usage of configurable warning terms in comments
    "no-warning-comments": [1, {"terms": ["todo", "fixme"], "location": "start"}],
    // disallow use of the with statement
    "no-with": 2,
    // require use of the second argument for parseInt()
    "radix": [2, "always"],
    // require declaration of all vars at the top of their containing scope
    "vars-on-top": 0,
    // require immediate function invocation to be wrapped in parentheses
    "wrap-iife": [2, "inside"],
    // require or disallow Yoda conditions
    "yoda": 0,

    // Strict Mode

    // controls location of Use Strict Directives
    "strict": [2, "global"],

    // Variables

    // enforce or disallow variable initializations at definition
    "init-declarations": [2, "always"],
    // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-catch-shadow": 2,
    // disallow deletion of variables
    "no-delete-var": 2,
    // disallow labels that share a name with a variable
    "no-label-var": 0,
    // disallow shadowing of names such as arguments
    "no-shadow-restricted-names": 2,
    // disallow declaration of variables already declared in the outer scope
    "no-shadow": 2,
    // disallow use of undefined when initializing variables
    "no-undef-init": 2,
    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef": [2, {"typeof": true}],
    // disallow use of undefined variable
    "no-undefined": 2,
    // disallow declaration of variables that are not used in the code
    "no-unused-vars": [2, {"vars": "all", "args": "after-used"}],
    // disallow use of variables before they are defined
    "no-use-before-define": 2,

    // Stylistic Issues

    // enforce spacing inside array brackets
    "array-bracket-spacing": [2, "never"],
    // disallow or enforce spaces inside of single line blocks
    "block-spacing": [2, "never"],
    // enforce one true brace style
    "brace-style": [2, "1tbs", {"allowSingleLine": false}],
    // require camel case names
    "camelcase": [2, {"properties": "always"}],
    // enforce spacing before and after comma
    "comma-spacing": [2, {"before": false, "after": true}],
    // enforce one true comma style
    "comma-style": [2, "last"],
    // require or disallow padding inside computed properties
    "computed-property-spacing": [2, "never"],
    // enforce consistent naming when capturing the current execution context
    "consistent-this": [2, "self"],
    // enforce newline at the end of file, with no multiple empty lines
    "eol-last": 2,
    // require function expressions to have a name
    "func-names": 0,
    // enforce use of function declarations or expressions
    "func-style": 0,
    // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-length": [2, {"min": 1, "max": 20}],
    // require identifiers to match the provided regular expression
    "id-match": 0,
    // specify tab or space width for your code
    "indent": [2, 2, {"SwitchCase": 1}],
    // specify whether double or single quotes should be used in JSX attributes
    "jsx-quotes": [2, "prefer-double"],
    // enforce spacing between keys and values in object literal properties
    "key-spacing": [2, {"beforeColon": false, "afterColon": true, "align": "value"}],
    // disallow mixed 'LF' and 'CRLF' as linebreaks
    "linebreak-style": [2, "unix"],
    // enforce empty lines around comments
    "lines-around-comment": [2, {"beforeBlockComment": true, "allowBlockStart": true, "allowObjectStart": true}],
    // specify the maximum depth that blocks can be nested
    "max-depth": [2, 4],
    // specify the maximum length of a line in your program
    "max-len": [2, 120, 4, {"ignoreUrls": true}],
    // specify the maximum depth callbacks can be nested
    "max-nested-callbacks": [2, 4],
    // limits the number of parameters that can be used in the function declaration.
    "max-params": [2, 5],
    // specify the maximum number of statement allowed in a function
    "max-statements": 0,
    // require a capital letter for constructors
    "new-cap": 2,
    // disallow the omission of parentheses when invoking a constructor with no arguments
    "new-parens": 2,
    // require or disallow an empty newline after variable declarations
    "newline-after-var": 2,
    // disallow use of the Array constructor
    "no-array-constructor": 2,
    // disallow use of bitwise operators
    "no-bitwise": 0,
    // disallow use of the continue statement
    "no-continue": 0,
    // disallow comments inline after code
    "no-inline-comments": 0,
    // disallow if as the only statement in an else block
    "no-lonely-if": 2,
    // disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": 2,
    // disallow multiple empty lines
    "no-multiple-empty-lines": 2,
    // disallow negated conditions
    "no-negated-condition": 0,
    // disallow nested ternary expressions
    "no-nested-ternary": 2,
    // disallow the use of the Object constructor
    "no-new-object": 2,
    // disallow use of unary operators, ++ and--
    "no-plusplus": 0,
    // disallow use of certain syntax in code
    "no-restricted-syntax": 0,
    // disallow space between function identifier and application
    "no-spaced-func": 2,
    // disallow the use of ternary operators
    "no-ternary": 0,
    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": 2,
    // disallow dangling underscores in identifiers
    "no-underscore-dangle": 2,
    // disallow the use of ternary operators when a simpler alternative exists
    "no-unneeded-ternary": [2, {"defaultAssignment": true}],
    // require or disallow padding inside curly braces
    "object-curly-spacing": [2, "never"],
    // require or disallow one variable declaration per function
    "one-var": [2, "never"],
    // require assignment operator shorthand where possible or prohibit it entirely
    "operator-assignment": [2, "always"],
    // enforce operators to be placed before or after line breaks
    "operator-linebreak": [2, "before"],
    // enforce padding within blocks
    "padded-blocks": [2, "never"],
    // require quotes around object literal property names
    "quote-props": [2, "consistent-as-needed"],
    // specify whether backticks, double or single quotes should be used
    "quotes": [2, "single", "avoid-escape"],
    // Require JSDoc comment
    "require-jsdoc": [1, {
      "require": {
        "FunctionDeclaration": true,
        "MethodDefinition":    true,
        "ClassDeclaration":    true
      }
    }],
    // enforce spacing before and after semicolons
    "semi-spacing": [2, {"before": false, "after": true}],
    // require or disallow use of semicolons instead of ASI
    "semi": [2, "always"],
    // sort variables within the same declaration block
    "sort-vars": 0,
    // require a space after certain keywords
    "space-after-keywords": [2, "always"],
    // require or disallow a space before blocks
    "space-before-blocks": [2, {"functions": "always", "keywords": "always"}],
    // require or disallow a space before function opening parenthesis
    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}],
    // require a space before certain keywords
    "space-before-keywords": [2, "always"],
    // require or disallow spaces inside parentheses
    "space-in-parens": [2, "never"],
    // require spaces around operators
    "space-infix-ops": 2,
    // require a space after return, throw, and case
    "space-return-throw-case": 2,
    // require or disallow spaces before/after unary operators
    "space-unary-ops": [2, {"words": true, "nonwords": false}],
    // require or disallow a space immediately following the // or /* in a comment
    "spaced-comment": [2, "always"],
    // require regex literals to be wrapped in parentheses
    "wrap-regex": 0
  }
}
